#!/bin/bash

DIR=`dirname $0`
VLPHOME="$HOME/.vpn-launchpad"

AMIID="ami-09a5c873bc79530d9"
PROFILE="default"
REGION="ap-southeast-2"
INSTYPE="t2.micro"
SSTCPPORT=`grep "SSTCPPORT=" $DIR/docker-shadowsocks-libev/shadowsocks-libev.sh |cut -d'=' -f2`
SSUDPPORT=`grep "SSUDPPORT=" $DIR/docker-shadowsocks-libev/shadowsocks-libev.sh |cut -d'=' -f2`
STACKID="vpnserver"

if [ ! -z $1 ]; then
	STACKID="$1";
fi 
echo "Creating Security Group of $STACKID..."
SGID=`aws --profile $PROFILE --region $REGION --output text ec2 create-security-group --group-name $STACKID-sg --description "Security group for $STACKID. Created by vpn-launchpad."`


echo "Creating Firewall rules of $STACKID..."
aws --profile $PROFILE --region $REGION --output text ec2 authorize-security-group-ingress --group-name $STACKID-sg --protocol tcp --port 22 --cidr 0.0.0.0/0
aws --profile $PROFILE --region $REGION --output text ec2 authorize-security-group-ingress --group-name $STACKID-sg --protocol udp --port 500 --cidr 0.0.0.0/0
aws --profile $PROFILE --region $REGION --output text ec2 authorize-security-group-ingress --group-name $STACKID-sg --protocol udp --port 4500 --cidr 0.0.0.0/0
aws --profile $PROFILE --region $REGION --output text ec2 authorize-security-group-ingress --group-name $STACKID-sg --protocol tcp --port 1701 --cidr 0.0.0.0/0
aws --profile $PROFILE --region $REGION --output text ec2 authorize-security-group-ingress --group-name $STACKID-sg --protocol udp --port 1194 --cidr 0.0.0.0/0
aws --profile $PROFILE --region $REGION --output text ec2 authorize-security-group-ingress --group-name $STACKID-sg --protocol tcp --port 5555 --cidr 0.0.0.0/0
aws --profile $PROFILE --region $REGION --output text ec2 authorize-security-group-ingress --group-name $STACKID-sg --protocol tcp --port $SSTCPPORT --cidr 0.0.0.0/0
aws --profile $PROFILE --region $REGION --output text ec2 authorize-security-group-ingress --group-name $STACKID-sg --protocol udp --port $SSUDPPORT --cidr 0.0.0.0/0


echo "Creating Key-Pair of $STACKID..."
if [ ! -d "$VLPHOME" ]; then
	mkdir $VLPHOME
fi
aws --profile $PROFILE --region $REGION ec2 create-key-pair --key-name $STACKID-key --query 'KeyMaterial' --output text > $VLPHOME/$STACKID-key.pem
chmod 600 $VLPHOME/$STACKID-key.pem


echo "Creating instance of $STACKID..."
INSTID=`aws --profile $PROFILE --region $REGION --output text ec2 run-instances --image-id $AMIID --security-group-ids $SGID --count 1 --instance-type $INSTYPE --key-name $STACKID-key --query 'Instances[0].InstanceId'`
echo $INSTID


echo "Waiting for the instance creation of $STACKID..."
while true; do
  sleep 10
  IPPUB=`aws --profile $PROFILE --region $REGION ec2 describe-instances --instance-ids $INSTID --query 'Reservations[0].Instances[0].PublicIpAddress'`
  if [ "$IPPUB" != "" ]; then
    break;
  fi
done


echo "Taging instance of $STACKID..."
aws --profile $PROFILE --region $REGION ec2 create-tags --resources $INSTID --tags "Key=Name,Value=$STACKID"


IPPUB=`aws --profile $PROFILE --region $REGION --output text ec2 describe-instances --instance-ids $INSTID --query 'Reservations[0].Instances[0].PublicIpAddress'`
echo $IPPUB

echo "Waiting for SSH up..."
while true; do
  sleep 5
  nc -zv $IPPUB 22
  if [ "$?" -eq "0" ]; then
    break;
  fi
done

echo "Instance provisioning..."
ssh-keyscan -H $IPPUB >> ~/.ssh/known_hosts
ssh -i $VLPHOME/$STACKID-key.pem ubuntu@$IPPUB "sudo apt update"
ssh -i $VLPHOME/$STACKID-key.pem ubuntu@$IPPUB "sudo apt install -y python-pip git"
ssh -i $VLPHOME/$STACKID-key.pem ubuntu@$IPPUB "sudo apt install apt-transport-https ca-certificates curl software-properties-common -y"
ssh -i $VLPHOME/$STACKID-key.pem ubuntu@$IPPUB "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -"
ssh -i $VLPHOME/$STACKID-key.pem ubuntu@$IPPUB "sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable""
ssh -i $VLPHOME/$STACKID-key.pem ubuntu@$IPPUB "sudo apt install -y docker.io"
ssh -i $VLPHOME/$STACKID-key.pem ubuntu@$IPPUB "sudo curl -L "https://github.com/docker/compose/releases/download/v2.11.1/docker-compose-$(uname -s)-$(uname -m)" -o "/usr/local/bin/docker-compose""
ssh -i $VLPHOME/$STACKID-key.pem ubuntu@$IPPUB "sudo chmod +x /usr/local/bin/docker-compose"
ssh -i $VLPHOME/$STACKID-key.pem ubuntu@$IPPUB "sudo sh -c \"echo '\n\nnet.core.default_qdisc=fq'>>/etc/sysctl.conf\""
ssh -i $VLPHOME/$STACKID-key.pem ubuntu@$IPPUB "sudo sh -c \"echo '\nnet.ipv4.tcp_congestion_control=bbr'>>/etc/sysctl.conf\""
ssh -i $VLPHOME/$STACKID-key.pem ubuntu@$IPPUB "sudo sysctl -p"
ssh -i $VLPHOME/$STACKID-key.pem ubuntu@$IPPUB "sudo usermod -aG docker ubuntu"

echo
echo "L2TP provisioning..."
scp -i $VLPHOME/$STACKID-key.pem -r $DIR/docker-sevpn ubuntu@$IPPUB:
ssh -i $VLPHOME/$STACKID-key.pem ubuntu@$IPPUB "cd docker-sevpn; sh sevpn.sh"

echo
echo "shadowsocks-libev provisioning..."
scp -i $VLPHOME/$STACKID-key.pem -r $DIR/docker-shadowsocks-libev ubuntu@$IPPUB:
ssh -i $VLPHOME/$STACKID-key.pem ubuntu@$IPPUB "cd docker-shadowsocks-libev; sh shadowsocks-libev.sh"

echo
echo "New VPN server Instance is up on $IPPUB"
echo "Enjoy."
